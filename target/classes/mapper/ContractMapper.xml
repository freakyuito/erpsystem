<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.overseachem.erp.mapper.ContractMapper" >
  <resultMap id="BaseResultMap" type="cn.overseachem.erp.pojo.Contract" >
    <id column="contract_id" property="contractId" jdbcType="VARCHAR" />
    <result column="fk_purchase_num" property="fkPurchaseNum" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.overseachem.erp.pojo.Contract" extends="BaseResultMap" >
    <result column="contract_file" property="contractFile" jdbcType="LONGVARBINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    contract_id, fk_purchase_num
  </sql>
  <sql id="Blob_Column_List" >
    contract_file
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="cn.overseachem.erp.pojo.ContractExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.overseachem.erp.pojo.ContractExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from contract
    where contract_id = #{contractId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from contract
    where contract_id = #{contractId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.overseachem.erp.pojo.ContractExample" >
    delete from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.overseachem.erp.pojo.Contract" >
    insert into contract (contract_id, fk_purchase_num, contract_file
      )
    values (#{contractId,jdbcType=VARCHAR}, #{fkPurchaseNum,jdbcType=VARCHAR}, #{contractFile,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.overseachem.erp.pojo.Contract" >
    insert into contract
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="contractId != null" >
        contract_id,
      </if>
      <if test="fkPurchaseNum != null" >
        fk_purchase_num,
      </if>
      <if test="contractFile != null" >
        contract_file,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="contractId != null" >
        #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="fkPurchaseNum != null" >
        #{fkPurchaseNum,jdbcType=VARCHAR},
      </if>
      <if test="contractFile != null" >
        #{contractFile,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.overseachem.erp.pojo.ContractExample" resultType="java.lang.Integer" >
    select count(*) from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update contract
    <set >
      <if test="record.contractId != null" >
        contract_id = #{record.contractId,jdbcType=VARCHAR},
      </if>
      <if test="record.fkPurchaseNum != null" >
        fk_purchase_num = #{record.fkPurchaseNum,jdbcType=VARCHAR},
      </if>
      <if test="record.contractFile != null" >
        contract_file = #{record.contractFile,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update contract
    set contract_id = #{record.contractId,jdbcType=VARCHAR},
      fk_purchase_num = #{record.fkPurchaseNum,jdbcType=VARCHAR},
      contract_file = #{record.contractFile,jdbcType=LONGVARBINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update contract
    set contract_id = #{record.contractId,jdbcType=VARCHAR},
      fk_purchase_num = #{record.fkPurchaseNum,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.overseachem.erp.pojo.Contract" >
    update contract
    <set >
      <if test="fkPurchaseNum != null" >
        fk_purchase_num = #{fkPurchaseNum,jdbcType=VARCHAR},
      </if>
      <if test="contractFile != null" >
        contract_file = #{contractFile,jdbcType=LONGVARBINARY},
      </if>
    </set>
    where contract_id = #{contractId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.overseachem.erp.pojo.Contract" >
    update contract
    set fk_purchase_num = #{fkPurchaseNum,jdbcType=VARCHAR},
      contract_file = #{contractFile,jdbcType=LONGVARBINARY}
    where contract_id = #{contractId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.overseachem.erp.pojo.Contract" >
    update contract
    set fk_purchase_num = #{fkPurchaseNum,jdbcType=VARCHAR}
    where contract_id = #{contractId,jdbcType=VARCHAR}
  </update>
</mapper>